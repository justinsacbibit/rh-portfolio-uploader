{"version":3,"sources":["../index.js"],"names":["axios","require","jsonFileManager","tokenFileManager","bearer","refresh","checkEnvironmentVariables","environmentVariables","environmentVariable","process","env","Error","console","log","UPLOAD_ENDPOINT","ROBINHOOD_CLIENT_ID","getStockPositions","response","get","data","map","decodeStockPosition","rawStockPosition","account","quantity","parseInt","averageBuyPrice","parseFloat","instrument","getOptionPositions","decodeOptionPosition","optionPosition","averagePrice","chainId","chainSymbol","id","option","type","decodeInstrumentMarketData","rawInstrumentMarketData","lastTradePrice","lastExtendedHoursTradePrice","symbol","updatedAt","decodeOptionMarketData","rawOptionMarketData","adjustedMarkPrice","breakEvenPrice","getMarketData","instrumentUrls","pathComponent","options","stocks","join","decodeOption","rawOption","expirationDate","strikePrice","url","getOptions","ids","uploadPositions","body","post","e","getMarketDataForStockPositions","stockPositions","length","stockPosition","getMarketDataForOptionPositions","optionPositions","optionUrls","getOptionsForOptionPositions","matchArray","match","getAndUploadPositions","stockMarketData","optionMarketData","positions","marketData","metadata","interval","refreshTokens","tokens","load","getNewTokens","ROBINHOOD_ACCESS_TOKEN","ROBINHOOD_REFRESH_TOKEN","defaults","headers","common","save","client_id","device_token","grant_type","refresh_token","scope","main","config","setInterval"],"mappings":"AACA,MAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,MAAM,EAACC,eAAD,KAAoBD,QAAQ,mBAAR,CAA1B;;AAMA,MAAME,mBAAmB,IAAID,eAAJ,CAAoB,QAApB,EAA8B;AACrDE,UAAQ,IAD6C;AAErDC,WAAS;AAF4C,CAA9B,CAAzB;;AAKA,SAASC,yBAAT,CAAmCC,oBAAnC,EAAyD;AACvD,OAAK,IAAIC,mBAAT,IAAgCD,oBAAhC,EAAsD;AACpD,QAAI,CAACE,QAAQC,GAAR,CAAYF,mBAAZ,CAAL,EAAuC;AACrC,YAAM,IAAIG,KAAJ,CAAW,YAAWH,mBAAoB,uBAA1C,CAAN;AACD,KAFD,MAEO;AACLI,cAAQC,GAAR,CAAYL,mBAAZ,EAAiCC,QAAQC,GAAR,CAAYF,mBAAZ,CAAjC;AACD;AACF;AACF;;AAEDF,0BAA0B,CAAC,iBAAD,CAA1B;;AAEA,MAAMQ,kBAAkBL,QAAQC,GAAR,CAAYI,eAAZ,IAA+B,EAAvD;;AAEA,MAAMC,sBAAsB,0CAA5B;;AAUA,eAAeC,iBAAf,GAA6D;AAC3D,QAAMC,WAAW,MAAMjB,MAAMkB,GAAN,CAAU,mDAAV,CAAvB;AACA,SAAOD,SAASE,IAAT,CAAc,SAAd,EAAyBC,GAAzB,CAA6BC,mBAA7B,CAAP;AACD;;AAED,SAASA,mBAAT,CAA6BC,gBAA7B,EAAsE;AACpE,SAAO;AACLC,aAASD,iBAAiB,SAAjB,CADJ;AAELE,cAAUC,SAASH,iBAAiB,UAAjB,CAAT,CAFL;AAGLI,qBAAiBC,WAAWL,iBAAiB,mBAAjB,CAAX,CAHZ;AAILM,gBAAYN,iBAAiB,YAAjB;AAJP,GAAP;AAMD;;AAaD,eAAeO,kBAAf,GAA+D;AAC7D,QAAMZ,WAAW,MAAMjB,MAAMkB,GAAN,CAAU,2DAAV,CAAvB;AACA,SAAOD,SAASE,IAAT,CAAc,SAAd,EAAyBC,GAAzB,CAA6BU,oBAA7B,CAAP;AACD;;AAED,SAASA,oBAAT,CAA8BC,cAA9B,EAAsE;AACpE,SAAO;AACLR,aAASQ,eAAe,SAAf,CADJ;AAELC,kBAAcL,WAAWI,eAAe,eAAf,CAAX,CAFT;AAGLE,aAASF,eAAe,UAAf,CAHJ;AAILG,iBAAaH,eAAe,aAAf,CAJR;AAKLI,QAAIJ,eAAe,IAAf,CALC;AAMLK,YAAQL,eAAe,QAAf,CANH;AAOLP,cAAUC,SAASM,eAAe,UAAf,CAAT,CAPL;AAQLM,UAAMN,eAAe,MAAf;AARD,GAAP;AAUD;;AASD,SAASO,0BAAT,CAAoCC,uBAApC,EAA2F;AACzF,SAAO;AACLC,oBAAgBb,WAAWY,wBAAwB,kBAAxB,CAAX,CADX;AAELE,iCAA6Bd,WAAWY,wBAAwB,iCAAxB,CAAX,CAFxB;AAGLG,YAAQH,wBAAwB,QAAxB,CAHH;AAILI,eAAWJ,wBAAwB,YAAxB,CAJN;AAKLX,gBAAYW,wBAAwB,YAAxB;AALP,GAAP;AAOD;;AAED,SAASK,sBAAT,CAAgCC,mBAAhC,EAA+E;AAC7E,SAAO;AACLC,uBAAmBD,oBAAoB,qBAApB,CADd;AAELE,oBAAgBF,oBAAoB,kBAApB,CAFX;AAGLjB,gBAAYiB,oBAAoB,YAApB;AAHP,GAAP;AAKD;;AAID,eAAeG,aAAf,CAAyEC,cAAzE,EAAmGZ,IAAnG,EAAuI;AACrI,QAAMa,gBAAgB;AACpBC,aAAS,SADW;AAEpBC,YAAQ;AAFY,IAGpBf,IAHoB,CAAtB;AAIA,QAAMpB,WAAW,MAAMjB,MAAMkB,GAAN,CACpB,wCAAuCgC,aAAc,iBAAgBD,eAAeI,IAAf,CAAoB,GAApB,CAAyB,EAD1E,CAAvB;;AAIA,MAAIhB,SAAS,SAAb,EAAwB;AACtB,WAAOpB,SAASE,IAAT,CAAc,SAAd,EAAyBC,GAAzB,CAA6BwB,sBAA7B,CAAP;AACD;AACD,SAAO3B,SAASE,IAAT,CAAc,SAAd,EAAyBC,GAAzB,CAA6BkB,0BAA7B,CAAP;AACD;;AAqBD,SAASgB,YAAT,CAAsBC,SAAtB,EAAiD;AAC/C,SAAO;AACLtB,aAASsB,UAAU,UAAV,CADJ;AAELrB,iBAAaqB,UAAU,cAAV,CAFR;AAGLC,oBAAgBD,UAAU,iBAAV,CAHX;AAILpB,QAAIoB,UAAU,IAAV,CAJC;AAKLE,iBAAa9B,WAAW4B,UAAU,cAAV,CAAX,CALR;AAMLlB,UAAMkB,UAAU,MAAV,CAND;AAOLG,SAAKH,UAAU,KAAV;AAPA,GAAP;AASD;;AAED,eAAeI,UAAf,CAA0BC,GAA1B,EAA4D;AAC1D,QAAM3C,WAAW,MAAMjB,MAAMkB,GAAN,CAAW,sDAAqD0C,IAAIP,IAAJ,CAAS,GAAT,CAAc,EAA9E,CAAvB;AACA,SAAOpC,SAASE,IAAT,CAAc,SAAd,EAAyBC,GAAzB,CAA6BkC,YAA7B,CAAP;AACD;;AAgBD,eAAeO,eAAf,CAA+BC,IAA/B,EAAiE;AAC/D,MAAI;AACF,WAAO,MAAM9D,MAAM+D,IAAN,CAAWjD,eAAX,EAA4BgD,IAA5B,CAAb;AACD,GAFD,CAEE,OAAOE,CAAP,EAAU;AACVpD,YAAQC,GAAR,CAAYmD,CAAZ;AACA,UAAMA,CAAN;AACD;AACF;;AAED,eAAeC,8BAAf,CAA8CC,cAA9C,EAAgH;AAC9G,MAAIA,eAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,WAAO,EAAP;AACD;AACD,QAAMlB,iBAAiBiB,eAAe9C,GAAf,CAAoBgD,aAAD,IAAmBA,cAAcxC,UAApD,CAAvB;AACA,SAAO,MAAMoB,cAAcC,cAAd,EAA8B,QAA9B,CAAb;AACD;;AAED,eAAeoB,+BAAf,CAA+CC,eAA/C,EAA+G;AAC7G,MAAIA,gBAAgBH,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,WAAO,EAAP;AACD;AACD,QAAMI,aAAaD,gBAAgBlD,GAAhB,CAAqBW,cAAD,IAAoBA,eAAeK,MAAvD,CAAnB;AACA,SAAO,MAAMY,cAAcuB,UAAd,EAA0B,SAA1B,CAAb;AACD;;AAED,eAAeC,4BAAf,CAA4CF,eAA5C,EAAkG;AAChG,MAAIA,gBAAgBH,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,WAAO,EAAP;AACD;;AAED,QAAMP,MAAMU,gBAAgBlD,GAAhB,CACTW,cAAD,IAAoB;AAClB,UAAM0C,aAAa1C,eAAeK,MAAf,CAAsBsC,KAAtB,CAA4B,qBAA5B,CAAnB;AACA,QAAI,CAACD,UAAD,IAAeA,WAAWN,MAAX,KAAsB,CAAzC,EAA4C;AAC1C,YAAM,IAAIxD,KAAJ,CAAW,gDAA+CoB,eAAeK,MAAO,EAAhF,CAAN;AACD;AACD,WAAOqC,WAAW,CAAX,CAAP;AACD,GAPS,CAAZ;AASA,SAAO,MAAMd,WAAWC,GAAX,CAAb;AACD;;AAED,eAAee,qBAAf,GAAuC;AACrC/D,UAAQC,GAAR,CAAY,oBAAZ;AACA,QAAMqD,iBAAiB,MAAMlD,mBAA7B;AACA,QAAMsD,kBAAkB,MAAMzC,oBAA9B;AACAjB,UAAQC,GAAR,CAAY,sBAAZ;AACA,QAAM+D,kBAAkB,MAAMX,+BAA+BC,cAA/B,CAA9B;AACA,QAAMW,mBAAmB,MAAMR,gCAAgCC,eAAhC,CAA/B;AACA1D,UAAQC,GAAR,CAAY,mBAAZ;AACA,QAAMsC,UAAU,MAAMqB,6BAA6BF,eAA7B,CAAtB;AACA1D,UAAQC,GAAR,CAAY,WAAZ;AACA,QAAMgD,gBAAgB;AACpBiB,eAAW;AACT1B,cAAQc,cADC;AAETf,eAASmB;AAFA,KADS;AAKpBS,gBAAY;AACV3B,cAAQwB,eADE;AAEVzB,eAAS0B;AAFC,KALQ;AASpBG,cAAU;AACR7B;AADQ;AATU,GAAhB,CAAN;AAaAvC,UAAQC,GAAR,CAAY,UAAZ;AACD;;AAED,MAAMoE,WAAW,OAAO,EAAP,GAAY,EAA7B;;AAEA,eAAeC,aAAf,GAA+B;AAC7B,MAAIC,SAAiB,MAAMhF,iBAAiBiF,IAAjB,EAA3B;;AAEA,MAAI;AACFxE,YAAQC,GAAR,CAAY,uCAAZ;AACAsE,aAAS,MAAME,aAAaF,MAAb,CAAf;AACAvE,YAAQC,GAAR,CAAY,kBAAZ;AACD,GAJD,CAIE,OAAOmD,CAAP,EAAU;AACVpD,YAAQC,GAAR,CAAY,gCAAZ;AACA,QAAIJ,QAAQC,GAAR,CAAY4E,sBAAhB,EAAwC;AACtC1E,cAAQC,GAAR,CAAY,wCAAZ;AACAsE,aAAO/E,MAAP,GAAgBK,QAAQC,GAAR,CAAY4E,sBAAZ,IAAsC,EAAtD;AACD,KAHD,MAGO;AACL,YAAM,IAAI3E,KAAJ,CAAU,2CAAV,CAAN;AACD;AACD,QAAIF,QAAQC,GAAR,CAAY6E,uBAAhB,EAAyC;AACvC3E,cAAQC,GAAR,CAAY,kCAAZ;AACAsE,aAAO9E,OAAP,GAAiBI,QAAQC,GAAR,CAAY6E,uBAAZ,IAAuC,EAAxD;AACD,KAHD,MAGO;AACL,YAAM,IAAI5E,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAEDC,YAAQC,GAAR,CAAY,mBAAZ;AACAsE,aAAS,MAAME,aAAaF,MAAb,CAAf;AACAvE,YAAQC,GAAR,CAAY,kBAAZ;AACD;;AAEDb,QAAMwF,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASP,OAAO/E,MAAO,EAAzE;AACA,QAAMD,iBAAiBwF,IAAjB,CAAsBR,MAAtB,CAAN;AACD;;AAED,eAAeE,YAAf,CAA4BF,MAA5B,EAA6D;AAC3D,QAAMlE,WAAW,MAAMjB,MAAM+D,IAAN,CAAW,yCAAX,EAAsD;AAC3E6B,eAAW,0CADgE;AAE3EC,kBAAc,sCAF6D;AAG3EC,gBAAY,eAH+D;AAI3EC,mBAAeZ,OAAO9E,OAJqD;AAK3E2F,WAAO;AALoE,GAAtD,CAAvB;AAOA,SAAO;AACL5F,YAAQa,SAASE,IAAT,CAAc,cAAd,CADH;AAELd,aAASY,SAASE,IAAT,CAAc,eAAd;AAFJ,GAAP;AAID;;AAED,eAAe8E,IAAf,GAAsB;AACpB,MAAI;AACF,UAAMf,eAAN;AACA,UAAMP,uBAAN;AACD,GAHD,CAGE,OAAOX,CAAP,EAAU;AACVpD,YAAQC,GAAR,CAAY,eAAZ;AACA,QAAImD,EAAE/C,QAAN,EAAgB;AACd,UAAI+C,EAAE/C,QAAF,CAAWiF,MAAX,IAAqBlC,EAAE/C,QAAF,CAAWiF,MAAX,CAAkBxC,GAA3C,EAAgD;AAC9C9C,gBAAQC,GAAR,CAAYmD,EAAE/C,QAAF,CAAWiF,MAAX,CAAkBxC,GAA9B;AACD;AACD,UAAIM,EAAE/C,QAAF,CAAWE,IAAf,EAAqB;AACnBP,gBAAQC,GAAR,CAAYmD,EAAE/C,QAAF,CAAWE,IAAvB;AACD;AACF,KAPD,MAOO;AACLP,cAAQC,GAAR,CAAYmD,CAAZ;AACD;AACF;AACF;;AAEDmC,YAAY,YAAY;AACtB,QAAMF,MAAN;AACD,CAFD,EAEGhB,QAFH;;AAIA,CAAC,kBAAiB;AAChB,QAAMgB,MAAN;AACD,CAFD","file":"index.js","sourcesContent":["// @flow\nconst axios = require('axios');\nconst {jsonFileManager} = require('./JsonFileManager');\n\ntype Tokens = {\n  bearer: string,\n  refresh: string,\n};\nconst tokenFileManager = new jsonFileManager('tokens', {\n  bearer: null,\n  refresh: null,\n});\n\nfunction checkEnvironmentVariables(environmentVariables) {\n  for (let environmentVariable of environmentVariables) {\n    if (!process.env[environmentVariable]) {\n      throw new Error(`Must set ${environmentVariable} environment variable`)\n    } else {\n      console.log(environmentVariable, process.env[environmentVariable]);\n    }\n  }\n}\n\ncheckEnvironmentVariables(['UPLOAD_ENDPOINT']);\n\nconst UPLOAD_ENDPOINT = process.env.UPLOAD_ENDPOINT || '';\n\nconst ROBINHOOD_CLIENT_ID = 'c82SH0WZOsabOXGP2sxqcj34FxkvfnWRZBKlBjFS';\n\n\ntype StockPosition = {\n  account: string,\n  quantity: number,\n  averageBuyPrice: number,\n  instrument: string,\n};\n\nasync function getStockPositions(): Promise<StockPosition[]> {\n  const response = await axios.get('https://api.robinhood.com/positions/?nonzero=true');\n  return response.data['results'].map(decodeStockPosition);\n}\n\nfunction decodeStockPosition(rawStockPosition: Object): StockPosition {\n  return {\n    account: rawStockPosition['account'],\n    quantity: parseInt(rawStockPosition['quantity']),\n    averageBuyPrice: parseFloat(rawStockPosition['average_buy_price']),\n    instrument: rawStockPosition['instrument'],\n  };\n}\n\ntype OptionPosition = {\n  account: string,\n  averagePrice: number,\n  chainId: string,\n  chainSymbol: string,\n  id: string,\n  option: string,\n  quantity: number,\n  type: string,\n};\n\nasync function getOptionPositions(): Promise<OptionPosition[]> {\n  const response = await axios.get('https://api.robinhood.com/options/positions/?nonzero=True');\n  return response.data['results'].map(decodeOptionPosition);\n}\n\nfunction decodeOptionPosition(optionPosition: Object): OptionPosition {\n  return {\n    account: optionPosition['account'],\n    averagePrice: parseFloat(optionPosition['average_price']),\n    chainId: optionPosition['chain_id'],\n    chainSymbol: optionPosition['chainSymbol'],\n    id: optionPosition['id'],\n    option: optionPosition['option'],\n    quantity: parseInt(optionPosition['quantity']),\n    type: optionPosition['type'],\n  };\n}\n\ntype OptionMarketData = {\n  adjustedMarkPrice: number,\n  breakEvenPrice: number,\n  instrument: string,\n};\n\n\nfunction decodeInstrumentMarketData(rawInstrumentMarketData: Object): InstrumentMarketData {\n  return {\n    lastTradePrice: parseFloat(rawInstrumentMarketData['last_trade_price']),\n    lastExtendedHoursTradePrice: parseFloat(rawInstrumentMarketData['last_extended_hours_trade_price']),\n    symbol: rawInstrumentMarketData['symbol'],\n    updatedAt: rawInstrumentMarketData['updated_at'],\n    instrument: rawInstrumentMarketData['instrument'],\n  };\n}\n\nfunction decodeOptionMarketData(rawOptionMarketData: Object): OptionMarketData {\n  return {\n    adjustedMarkPrice: rawOptionMarketData['adjusted_mark_price'],\n    breakEvenPrice: rawOptionMarketData['break_even_price'],\n    instrument: rawOptionMarketData['instrument'],\n  };\n}\n\ntype MarketDataType = 'options' | 'stocks'\n\nasync function getMarketData<T: InstrumentMarketData | OptionMarketData>(instrumentUrls: string[], type: MarketDataType): Promise<T[]> {\n  const pathComponent = {\n    options: 'options',\n    stocks: 'quotes',\n  }[type];\n  const response = await axios.get(\n    `https://api.robinhood.com/marketdata/${pathComponent}/?instruments=${instrumentUrls.join(',')}`,\n  );\n\n  if (type === 'options') {\n    return response.data['results'].map(decodeOptionMarketData);\n  }\n  return response.data['results'].map(decodeInstrumentMarketData);\n}\n\ntype InstrumentMarketData = {\n  lastTradePrice: number,\n  lastExtendedHoursTradePrice: number,\n  symbol: string,\n  updatedAt: string,\n  instrument: string,\n};\n\n\ntype Option = {\n  chainId: string,\n  chainSymbol: string,\n  expirationDate: string,\n  id: string,\n  strikePrice: number,\n  type: string,\n  url: string,\n};\n\nfunction decodeOption(rawOption: Object): Option {\n  return {\n    chainId: rawOption['chain_id'],\n    chainSymbol: rawOption['chain_symbol'],\n    expirationDate: rawOption['expiration_date'],\n    id: rawOption['id'],\n    strikePrice: parseFloat(rawOption['strike_price']),\n    type: rawOption['type'],\n    url: rawOption['url'],\n  };\n}\n\nasync function getOptions(ids: string[]): Promise<Option[]> {\n  const response = await axios.get(`https://api.robinhood.com/options/instruments/?ids=${ids.join(',')}`);\n  return response.data['results'].map(decodeOption);\n}\n\ntype UploadPositionsRequestBody = {\n  positions: {\n    stocks: StockPosition[],\n    options: OptionPosition[],\n  },\n  marketData: {\n    stocks: InstrumentMarketData[],\n    options: OptionMarketData[],\n  },\n  metadata: {\n    options: Option[],\n  },\n};\n\nasync function uploadPositions(body: UploadPositionsRequestBody) {\n  try {\n    return await axios.post(UPLOAD_ENDPOINT, body);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\n\nasync function getMarketDataForStockPositions(stockPositions: StockPosition[]): Promise<InstrumentMarketData[]> {\n  if (stockPositions.length === 0) {\n    return [];\n  }\n  const instrumentUrls = stockPositions.map((stockPosition) => stockPosition.instrument);\n  return await getMarketData(instrumentUrls, 'stocks');\n}\n\nasync function getMarketDataForOptionPositions(optionPositions: OptionPosition[]): Promise<OptionMarketData[]> {\n  if (optionPositions.length === 0) {\n    return [];\n  }\n  const optionUrls = optionPositions.map((optionPosition) => optionPosition.option);\n  return await getMarketData(optionUrls, 'options');\n}\n\nasync function getOptionsForOptionPositions(optionPositions: OptionPosition[]): Promise<Option[]> {\n  if (optionPositions.length === 0) {\n    return [];\n  }\n\n  const ids = optionPositions.map(\n    (optionPosition) => {\n      const matchArray = optionPosition.option.match(/instruments\\/(.*)\\//);\n      if (!matchArray || matchArray.length !== 2) {\n        throw new Error(`Could not extract option id from option url: ${optionPosition.option}`);\n      }\n      return matchArray[1];\n    }\n  );\n  return await getOptions(ids);\n}\n\nasync function getAndUploadPositions() {\n  console.log('Fetching positions');\n  const stockPositions = await getStockPositions();\n  const optionPositions = await getOptionPositions();\n  console.log('Fetching market data');\n  const stockMarketData = await getMarketDataForStockPositions(stockPositions);\n  const optionMarketData = await getMarketDataForOptionPositions(optionPositions);\n  console.log('Fetching metadata');\n  const options = await getOptionsForOptionPositions(optionPositions);\n  console.log('Uploading');\n  await uploadPositions({\n    positions: {\n      stocks: stockPositions,\n      options: optionPositions,\n    },\n    marketData: {\n      stocks: stockMarketData,\n      options: optionMarketData,\n    },\n    metadata: {\n      options,\n    },\n  });\n  console.log('Uploaded');\n}\n\nconst interval = 1000 * 60 * 10;\n\nasync function refreshTokens() {\n  let tokens: Tokens = await tokenFileManager.load();\n\n  try {\n    console.log('Refreshing tokens using stored tokens');\n    tokens = await getNewTokens(tokens);\n    console.log('Refreshed tokens');\n  } catch (e) {\n    console.log('Falling back to using env vars');\n    if (process.env.ROBINHOOD_ACCESS_TOKEN) {\n      console.log('Using access/bearer token from env var');\n      tokens.bearer = process.env.ROBINHOOD_ACCESS_TOKEN || '';\n    } else {\n      throw new Error('ROBINHOOD_ACCESS_TOKEN env var is not set')\n    }\n    if (process.env.ROBINHOOD_REFRESH_TOKEN) {\n      console.log('Using refresh token from env var');\n      tokens.refresh = process.env.ROBINHOOD_REFRESH_TOKEN || '';\n    } else {\n      throw new Error('ROBINHOOD_REFRESH_TOKEN env var is not set')\n    }\n\n    console.log('Refreshing tokens');\n    tokens = await getNewTokens(tokens);\n    console.log('Refreshed tokens');\n  }\n\n  axios.defaults.headers.common['Authorization'] = `Bearer ${tokens.bearer}`;\n  await tokenFileManager.save(tokens);\n}\n\nasync function getNewTokens(tokens: Tokens): Promise<Tokens> {\n  const response = await axios.post('https://api.robinhood.com/oauth2/token/', {\n    client_id: 'c82SH0WZOsabOXGP2sxqcj34FxkvfnWRZBKlBjFS',\n    device_token: '7bb909cd-0cce-44f4-a4ac-b6868013c756',\n    grant_type: 'refresh_token',\n    refresh_token: tokens.refresh,\n    scope: 'web_limited',\n  });\n  return {\n    bearer: response.data['access_token'],\n    refresh: response.data['refresh_token'],\n  };\n}\n\nasync function main() {\n  try {\n    await refreshTokens();\n    await getAndUploadPositions();\n  } catch (e) {\n    console.log('Caught error:');\n    if (e.response) {\n      if (e.response.config && e.response.config.url) {\n        console.log(e.response.config.url);\n      }\n      if (e.response.data) {\n        console.log(e.response.data);\n      }\n    } else {\n      console.log(e);\n    }\n  }\n}\n\nsetInterval(async () => {\n  await main();\n}, interval);\n\n(async function() {\n  await main();\n})();\n\n"]}