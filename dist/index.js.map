{"version":3,"sources":["../index.js"],"names":["axios","require","checkEnvironmentVariables","environmentVariables","environmentVariable","process","env","Error","console","log","ROBINHOOD_TOKEN","UPLOAD_ENDPOINT","defaults","headers","common","getStockPositions","response","get","data","map","decodeStockPosition","rawStockPosition","account","quantity","parseInt","averageBuyPrice","parseFloat","instrument","getOptionPositions","decodeOptionPosition","optionPosition","averagePrice","chainId","chainSymbol","id","option","type","decodeInstrumentMarketData","rawInstrumentMarketData","lastTradePrice","lastExtendedHoursTradePrice","symbol","updatedAt","decodeOptionMarketData","rawOptionMarketData","adjustedMarkPrice","breakEvenPrice","getMarketData","instrumentUrls","pathComponent","options","stocks","join","decodeOption","rawOption","expirationDate","strikePrice","url","getOptions","ids","uploadPositions","body","post","e","getMarketDataForStockPositions","stockPositions","stockPosition","getMarketDataForOptionPositions","optionPositions","optionUrls","getOptionsForOptionPositions","matchArray","match","length","getAndUploadPositions","stockMarketData","optionMarketData","positions","marketData","metadata","oneHour","setInterval"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nconst axios = require('axios');\n\nfunction checkEnvironmentVariables(environmentVariables) {\n  for (let environmentVariable of environmentVariables) {\n    if (!process.env[environmentVariable]) {\n      throw new Error(`Must set ${environmentVariable} environment variable`)\n    } else {\n      console.log(environmentVariable, process.env[environmentVariable]);\n    }\n  }\n}\n\ncheckEnvironmentVariables(['ROBINHOOD_TOKEN', 'UPLOAD_ENDPOINT']);\nconst ROBINHOOD_TOKEN = process.env.ROBINHOOD_TOKEN || '';\nconst UPLOAD_ENDPOINT = process.env.UPLOAD_ENDPOINT || '';\n\naxios.defaults.headers.common['Authorization'] = `Bearer ${ROBINHOOD_TOKEN}`;\n\ntype StockPosition = {\n  account: string,\n  quantity: number,\n  averageBuyPrice: number,\n  instrument: string,\n};\n\nasync function getStockPositions(): Promise<StockPosition[]> {\n  const response = await axios.get('https://api.robinhood.com/positions/?nonzero=true');\n  return response.data['results'].map(decodeStockPosition);\n}\n\nfunction decodeStockPosition(rawStockPosition: Object): StockPosition {\n  return {\n    account: rawStockPosition['account'],\n    quantity: parseInt(rawStockPosition['quantity']),\n    averageBuyPrice: parseFloat(rawStockPosition['average_buy_price']),\n    instrument: rawStockPosition['instrument'],\n  };\n}\n\ntype OptionPosition = {\n  account: string,\n  averagePrice: number,\n  chainId: string,\n  chainSymbol: string,\n  id: string,\n  option: string,\n  quantity: number,\n  type: string,\n};\n\nasync function getOptionPositions(): Promise<OptionPosition[]> {\n  const response = await axios.get('https://api.robinhood.com/options/positions/?nonzero=True');\n  return response.data['results'].map(decodeOptionPosition);\n}\n\nfunction decodeOptionPosition(optionPosition: Object): OptionPosition {\n  return {\n    account: optionPosition['account'],\n    averagePrice: parseFloat(optionPosition['average_price']),\n    chainId: optionPosition['chain_id'],\n    chainSymbol: optionPosition['chainSymbol'],\n    id: optionPosition['id'],\n    option: optionPosition['option'],\n    quantity: parseInt(optionPosition['quantity']),\n    type: optionPosition['type'],\n  };\n}\n\ntype OptionMarketData = {\n  adjustedMarkPrice: number,\n  breakEvenPrice: number,\n  instrument: string,\n};\n\n\nfunction decodeInstrumentMarketData(rawInstrumentMarketData: Object): InstrumentMarketData {\n  return {\n    lastTradePrice: parseFloat(rawInstrumentMarketData['last_trade_price']),\n    lastExtendedHoursTradePrice: parseFloat(rawInstrumentMarketData['last_extended_hours_trade_price']),\n    symbol: rawInstrumentMarketData['symbol'],\n    updatedAt: rawInstrumentMarketData['updated_at'],\n    instrument: rawInstrumentMarketData['instrument'],\n  };\n}\n\nfunction decodeOptionMarketData(rawOptionMarketData: Object): OptionMarketData {\n  return {\n    adjustedMarkPrice: rawOptionMarketData['adjusted_mark_price'],\n    breakEvenPrice: rawOptionMarketData['break_even_price'],\n    instrument: rawOptionMarketData['instrument'],\n  };\n}\n\ntype MarketDataType = 'options' | 'stocks'\n\nasync function getMarketData<T: InstrumentMarketData | OptionMarketData>(instrumentUrls: string[], type: MarketDataType): Promise<T[]> {\n  const pathComponent = {\n    options: 'options',\n    stocks: 'quotes',\n  }[type];\n  const response = await axios.get(\n    `https://api.robinhood.com/marketdata/${pathComponent}/?instruments=${instrumentUrls.join(',')}`,\n  );\n\n  if (type === 'options') {\n    return response.data['results'].map(decodeOptionMarketData);\n  }\n  return response.data['results'].map(decodeInstrumentMarketData);\n}\n\ntype InstrumentMarketData = {\n  lastTradePrice: number,\n  lastExtendedHoursTradePrice: number,\n  symbol: string,\n  updatedAt: string,\n  instrument: string,\n};\n\n\ntype Option = {\n  chainId: string,\n  chainSymbol: string,\n  expirationDate: string,\n  id: string,\n  strikePrice: number,\n  type: string,\n  url: string,\n};\n\nfunction decodeOption(rawOption: Object): Option {\n  return {\n    chainId: rawOption['chain_id'],\n    chainSymbol: rawOption['chain_symbol'],\n    expirationDate: rawOption['expiration_date'],\n    id: rawOption['id'],\n    strikePrice: parseFloat(rawOption['strike_price']),\n    type: rawOption['type'],\n    url: rawOption['url'],\n  };\n}\n\nasync function getOptions(ids: string[]): Promise<Option[]> {\n  const response = await axios.get(`https://api.robinhood.com/options/instruments/?ids=${ids.join(',')}`);\n  return response.data['results'].map(decodeOption);\n}\n\n\nasync function uploadPositions(body) {\n  try {\n    return await axios.post(UPLOAD_ENDPOINT, body);\n  } catch (e) {\n    console.log(e);\n    throw e;\n  }\n}\n\nasync function getMarketDataForStockPositions(stockPositions: StockPosition[]): Promise<InstrumentMarketData[]> {\n  const instrumentUrls = stockPositions.map((stockPosition) => stockPosition.instrument);\n  return await getMarketData(instrumentUrls, 'stocks');\n}\n\nasync function getMarketDataForOptionPositions(optionPositions: OptionPosition[]): Promise<OptionMarketData[]> {\n  const optionUrls = optionPositions.map((optionPosition) => optionPosition.option);\n  return await getMarketData(optionUrls, 'options');\n}\n\nasync function getOptionsForOptionPositions(optionPositions: OptionPosition[]): Promise<Option[]> {\n  const ids = optionPositions.map(\n    (optionPosition) => {\n      const matchArray = optionPosition.option.match(/instruments\\/(.*)\\//);\n      if (!matchArray || matchArray.length !== 2) {\n        throw new Error(`Could not extract option id from option url: ${optionPosition.option}`);\n      }\n      return matchArray[1];\n    }\n  );\n  return await getOptions(ids);\n}\n\nasync function getAndUploadPositions() {\n  const stockPositions = await getStockPositions();\n  const optionPositions = await getOptionPositions();\n  const stockMarketData = await getMarketDataForStockPositions(stockPositions);\n  const optionMarketData = await getMarketDataForOptionPositions(optionPositions);\n  const options = await getOptionsForOptionPositions(optionPositions);\n  await uploadPositions({\n    positions: {\n      stocks: stockPositions,\n      options: optionPositions,\n    },\n    marketData: {\n      stocks: stockMarketData,\n      options: optionMarketData,\n    },\n    metadata: {\n      options,\n    },\n  });\n}\n\nconst oneHour = 1000 * 60 * 60;\n\nsetInterval(async () => {\n  await getAndUploadPositions();\n}, oneHour);\n"]}