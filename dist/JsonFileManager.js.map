{"version":3,"sources":["../JsonFileManager.js"],"names":["fs","require","AsyncLock","lock","jsonFileManager","name","defaultValue","path","prototype","load","acquire","body","readFile","JSON","parse","err","code","Error","toString","console","log","writeFile","stringify","save","value","exports"],"mappings":"AACA,MAAMA,KAAKC,QAAQ,OAAR,CAAX;AACA,MAAMC,YAAYD,QAAQ,YAAR,CAAlB;;AAQA,MAAME,OAAO,IAAID,SAAJ,EAAb;;AAEA,SAASE,eAAT,CAAyBC,IAAzB,EAAuCC,YAAvC,EAA6D;AAC3D,OAAKC,IAAL,GAAa,KAAIF,IAAK,OAAtB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACD;;AAEDF,gBAAgBI,SAAhB,CAA0BC,IAA1B,GAAiC,eAAeA,IAAf,GAA8B;AAC7D,SAAO,MAAMN,KAAKO,OAAL,CAAa,KAAKH,IAAlB,EAAwB,YAAY;AAC/C,QAAI;AACF,YAAMI,OAAO,MAAMX,GAAGY,QAAH,CAAY,KAAKL,IAAjB,CAAnB;AACA,aAAOM,KAAKC,KAAL,CAAWH,IAAX,CAAP;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY;AACZ,UAAIA,IAAIC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,cAAM,IAAIC,KAAJ,CAAW,0BAAyB,KAAKV,IAAK,KAAIQ,IAAIG,QAAJ,EAAe,EAAjE,CAAN;AACD;AACDC,cAAQC,GAAR,CAAY,wBAAZ,EAAsC,KAAKb,IAA3C,EAAiDQ,GAAjD;AACD;;AAED,QAAI;AACF,YAAMf,GAAGqB,SAAH,CAAa,KAAKd,IAAlB,EAAwBM,KAAKS,SAAL,CAAe,KAAKhB,YAApB,CAAxB,CAAN;AACD,KAFD,CAEE,OAAOS,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAW,oCAAmC,KAAKV,IAAK,KAAIQ,IAAIG,QAAJ,EAAe,EAA3E,CAAN;AACD;;AAED,WAAO,KAAKZ,YAAZ;AACD,GAlBY,CAAb;AAmBD,CApBD;;AAsBAF,gBAAgBI,SAAhB,CAA0Be,IAA1B,GAAiC,eAAeA,IAAf,CAAoBC,KAApB,EAA2C;AAC1E,SAAO,MAAMrB,KAAKO,OAAL,CAAa,KAAKH,IAAlB,EAAwB,YAAY;AAC/C,QAAI;AACF,aAAO,MAAMP,GAAGqB,SAAH,CAAa,KAAKd,IAAlB,EAAwBM,KAAKS,SAAL,CAAeE,KAAf,CAAxB,CAAb;AACD,KAFD,CAEE,OAAOT,GAAP,EAAY;AACZ,YAAM,IAAIE,KAAJ,CAAW,qBAAoB,KAAKV,IAAK,KAAIQ,IAAIG,QAAJ,EAAe,EAA5D,CAAN;AACD;AACF,GANY,CAAb;AAOD,CARD;;AAUAO,QAAQrB,eAAR,GAA0BA,eAA1B","file":"JsonFileManager.js","sourcesContent":["// @flow\nconst fs = require('mz/fs');\nconst AsyncLock = require('async-lock');\n\n\nexport type JsonFileManager = {\n  load: () => Promise<Object>,\n  save: (Object) => Promise<Object>,\n};\n\nconst lock = new AsyncLock();\n\nfunction jsonFileManager(name: string, defaultValue: Object) {\n  this.path = `./${name}.json`;\n  this.defaultValue = defaultValue;\n}\n\njsonFileManager.prototype.load = async function load(): Object {\n  return await lock.acquire(this.path, async () => {\n    try {\n      const body = await fs.readFile(this.path);\n      return JSON.parse(body);\n    } catch (err) {\n      if (err.code !== 'ENOENT') {\n        throw new Error(`Could not read file at ${this.path}: ${err.toString()}`);\n      }\n      console.log('Error reading file at ', this.path, err);\n    }\n\n    try {\n      await fs.writeFile(this.path, JSON.stringify(this.defaultValue));\n    } catch (err) {\n      throw new Error(`Could not write default value to ${this.path}: ${err.toString()}`)\n    }\n\n    return this.defaultValue;\n  });\n};\n\njsonFileManager.prototype.save = async function save(value: Object): Object {\n  return await lock.acquire(this.path, async () => {\n    try {\n      return await fs.writeFile(this.path, JSON.stringify(value));\n    } catch (err) {\n      throw new Error(`Could not save to ${this.path}: ${err.toString()}`)\n    }\n  });\n};\n\nexports.jsonFileManager = jsonFileManager;\n"]}